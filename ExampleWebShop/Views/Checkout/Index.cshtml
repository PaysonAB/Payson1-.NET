@using ExampleWebShop.Models
@model PayViewModel

@functions {
    private IEnumerable<SelectListItem> AllCurrencies()
    {
        var l = new List<SelectListItem>();
        l.Add(new SelectListItem { Selected = true, Text = "SEK", Value = "SEK" });
        l.Add(new SelectListItem { Selected = false, Text = "EUR", Value = "EUR" });
        return l;
    }
    private IEnumerable<SelectListItem> AllLocaleCodes()
    {
        var l = new List<SelectListItem>();
        l.Add(new SelectListItem { Selected = true, Text = "EN", Value = "EN" });
        l.Add(new SelectListItem { Selected = false, Text = "SV", Value = "SV" });
        l.Add(new SelectListItem { Selected = false, Text = "FI", Value = "FI" });
        l.Add(new SelectListItem { Selected = false, Text = "NO", Value = "NO" });
        l.Add(new SelectListItem { Selected = false, Text = "DK", Value = "DK" });
        return l;
    }
    private IEnumerable<SelectListItem> AllGuaranteeOffered()
    {
        var l = new List<SelectListItem>();
        l.Add(new SelectListItem { Selected = true, Text = GuaranteeOffered.NO.ToString(), Value = GuaranteeOffered.NO.ToString() });
        l.Add(new SelectListItem { Selected = false, Text = GuaranteeOffered.OPTIONAL.ToString(), Value = GuaranteeOffered.OPTIONAL.ToString() });
        l.Add(new SelectListItem { Selected = false, Text = GuaranteeOffered.REQUIRED.ToString(), Value = GuaranteeOffered.REQUIRED.ToString() });
        return l;
    }
    private IEnumerable<SelectListItem> AllOrderDetauls()
    {
        var l = new List<SelectListItem>();
        l.Add(new SelectListItem { Selected = true, Text = "YES", Value = "True" });
        l.Add(new SelectListItem { Selected = false, Text = "NO", Value = "False" });
        return l;
    }
}

@{ ViewBag.Title = "Checkout"; }


@using (Html.BeginForm("Pay", "Checkout", FormMethod.Post, new { @class = "form-horizontal" }))
{
    <div class="hidden-phone row">
    <div class="span12">

        <h3>Order Items</h3>
    
        <table class="table" id="orderTable">
            <thead>
                <tr>
                    <th>
                        Product
                    </th>
                    <th>
                        Unit Price
                    </th>
                    <th>
                        Quantity
                    </th>
                    <th>
                        Tax
                    </th>
                    <th>
                        Sku <A href="#" title="Stock keeping unit -  unique identifier or code that refers to the particular stock keeping unit.">?</A>
                    </th>
                    <th>
                    </th>
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < Model.OrderItems.Count; i++)
                {
                    <tr>
                        <td>@Html.TextBoxFor(m => m.OrderItems[i].Description)
                        </td>
                        <td>@Html.TextBoxFor(m => m.OrderItems[i].UnitPrice, new { @class = "input-mini" })
                        </td>
                        <td>@Html.TextBoxFor(m => m.OrderItems[i].Quantity, new { @class = "input-mini" })
                        </td>
                        <td>@Html.TextBoxFor(m => m.OrderItems[i].TaxPercentage, new { @class = "input-mini" })
                        </td>
                        <td>@Html.TextBoxFor(m => m.OrderItems[i].Sku)
                        </td>
                        <td>
                            <button class="btn pull-right removeRow" disabled="disabled">
                                <i class="icon-minus"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    
        <div class="row">
            <button class="btn pull-right" id="newOrderRow">
                <i class="icon-plus"></i>Add Row</button>
        </div>
    
    </div>
    </div>

    <div class="row">
        <div class="span6">
            <h3>
                Delivery Information</h3>
            <div class="control-group">
                <label class="control-label" for="Sender_Email">
                    Customer Email:</label>
                <div class="controls">
                    @Html.TextBoxFor(m => m.Sender.Email)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Sender_FirstName">
                    First Name:</label>
                <div class="controls">
                    @Html.TextBoxFor(m => m.Sender.FirstName)
                </div>
            </div>
            <div class="control-group">
                <label class="control-label" for="Sender_LastName">
                    Last Name:</label>
                <div class="controls">
                    @Html.TextBoxFor(m => m.Sender.LastName)
                </div>
            </div>
            <p>
                <strong>Note:</strong> No email will be sent to the customer</p>
        </div>
        <div class="span6">
            <h3>
                Payment Method</h3>
            <div class="control-group">
                <label class="radio">
                    @Html.RadioButton("PaymentMethod", PaymentMethod.PaysonDirect, true)
                    Payson Direct
                    <br/>
                    For credit card payments a test card can be used: <strong>4581 1111 1111 1112</strong>.
                    Any expiration date and any Cvc code between 100 and 500 will work with this card.
                </label>
            </div>
            <div class="control-group">
                <label class="radio">
                    @Html.RadioButton("PaymentMethod", PaymentMethod.PaysonInvoice, false)
                    Payson Invoice
                    <br/>
                    This person number can be used for invoices: <strong>230119-6412</strong>. Any Zip
                    Code will work with this number.
                </label>
            </div>
            <div class="control-group">
                <label class="radio">
                    @Html.RadioButton("PaymentMethod", PaymentMethod.PaysonAll, false)
                    Payson Direct and Invoice
                    <br/>
                    For credit card payments a test card can be used: <strong>4581 1111 1111 1112</strong>.
                    Any expiration date and any Cvc code between 100 and 500 will work with this card.
                    <br/>
                    This person number can be used for invoices: <strong>230119-6412</strong>. Any Zip
                    Code will work with this number.
                </label>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="span12">
            
            <button id="advanced-btn" type="button" class="btn btn-link" data-toggle="collapse" data-target="#debugParameters">Advanced</button>

            <div id="debugParameters" class="collapse">
                <h3>
                    Debug Parameters</h3>
                
                <div class="span7 control-group">
                    For more detailed testing you may create your own test agent for use in the test environment. Create your own test agent 
                    <a href="https://test-www.payson.se/account/testagent/">here</a>. This test agent will be automatically approved for both 
                    credit card/bank payments and invoice payments. Using your own test agent makes it possible for you to login to that test 
                    account (on the test enironment) and see the requestlogs for your test agent. 
                </div>
                <div class="row">
                    <div class="span6">
                        <div class="control-group">
                            <label class="control-label" for="UserId">
                                PAYSON-SECURITY-USERID:</label>
                            <div class="controls">
                                @Html.TextBoxFor(m => m.UserId, new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="UserKey">
                                PAYSON-SECURITY-PASSWORD:</label>
                            <div class="controls">
                                @Html.TextBoxFor(m => m.UserKey, new {@class = "input-xlarge"})
                            </div>
                        </div>

                        <div class="control-group">
                            <label class="control-label" for="Receiver_Email">
                                Test credentials:
                            </label>
                            <div class="controls">
                                <button type="button" onclick="TestCredentials()">Validate credentials</button>
                                <div id="validationCredentials"></div>
                            </div>
                        </div>

                        <div class="control-group">
                            <label class="control-label" for="Receiver_Email">
                                Receiver Email:</label>
                            <div class="controls">
                                @Html.TextBoxFor(m => m.Receiver.Email, new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="Receiver_FirstName">
                                Receiver First Name:</label>
                            <div class="controls">
                                @Html.TextBoxFor(m => m.Receiver.FirstName, new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="Receiver_LastName">
                                Receiver Last Name:</label>
                            <div class="controls">
                                @Html.TextBoxFor(m => m.Receiver.LastName, new { @class = "input-xlarge" })
                            </div>
                        </div>
                    </div>
                    <div class="span6">
                        <div class="control-group">
                            <label class="control-label" for="Memo">
                                Description (memo):</label>
                            <div class="controls">
                                @Html.TextBoxFor(m => m.Memo, new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="CurrencyCode">
                                Currency:</label>
                            <div class="controls">
                                @Html.DropDownListFor(m => m.CurrencyCode, AllCurrencies(), new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="LocaleCode">
                                Locale:</label>
                            <div class="controls">
                                @Html.DropDownListFor(m => m.LocaleCode, AllLocaleCodes(), new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="GuaranteeOffered">
                                Offer Guarantee:</label>
                            <div class="controls">
                                @Html.DropDownListFor(m => m.GuaranteeOffered, AllGuaranteeOffered(), new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="IncludeOrderDetails">
                                Include Order Details:</label>
                            <div class="controls">
                                @Html.DropDownListFor(m => m.IncludeOrderDetails, AllOrderDetauls(), new { @class = "input-xlarge" })
                            </div>
                        </div>
                        <div class="control-group">
                            <label class="control-label" for="ForwardUrl">
                                ForwardUrl:</label>
                            <div class="controls">
                                @Html.TextBoxFor(m => m.ForwardUrl, new { @class = "input-xlarge" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="span6 offset6">
            <h3 class="hidden-phone">Proceed to Payment</h3>
            <button class="btn btn-large btn-primary" type="submit">Pay with Payson</button>
        </div>
    </div>
}
